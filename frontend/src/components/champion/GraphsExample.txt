//let values = props.data //2d array containing [dates, values]
let values = [["2024-06-17T05:32:34.440Z", 49.22], ["2023-06-17T05:32:34.440Z", 44.22], ["2022-06-17T05:32:34.440Z", 34.22], ["2021-06-17T05:32:34.440Z", 50.22], ["2023-02-17T05:32:34.440Z", 50.22]];

//sorts values by date values of each sub array. The awkward syntax is necessary since the default sort() function sorts by alphabetical order. 
values.sort((a, b) => {
    let dateA = new Date(a[0]); // Parse each date string into a Date object
    let dateB = new Date(b[0]);
    return dateA - dateB; // Compare the dates
});

let xAxisScale
let yAxisScale
let datesArray

//TODO: Will need to find a way to make these scale as the container changes size in the future
let width = 400 
let height = 400 
let paddingTop = 30 
let paddingBottom = 50
let paddingLeft = 50
let paddingRight = 30

//This variable will select the svg element in the html file and generate the graph within it. Can also do let svg = d3.create("svg") if the svg element does not yet exist in the html file. Or do let svg = d3.select("body").append("svg") if the svg element does exist in the html file.
let svg = d3.select('svg') 

//viewBox: Defines the full drawing area of the SVG, allowing the content to be scaled within this area.
//max-width: 100%; height: auto;: Ensures that the SVG will resize to fit the width of its container while automatically adjusting its height to display all content. This makes the graph adaptable to different screen sizes.
const drawCanvas = () => {
    svg.attr('width', width)
    svg.attr('height', height)
    svg.attr("viewBox", [0, 0, width, height])
    svg.attr("style", "max-width: 100%; height: auto;");
}

//Format of each data point within 2d array: [date, winrate]
//WINRATE â€“ [[date: "2024-06-17T05:32:34.440Z", data: 58.22]]

const generateScales = () => {
  //map function iterates through values which is an array of arrays and returns the first element of each array (we have to do this in order to apply the max/min function to datesArray and to utilize xAxisScale which is a time scale)
  datesArray = values.map((d) => {
    return new Date(d[0])
  })

  //each graph should spawn in the top left corner of its respective container element
  //scale used to create visual x-axis representation (IT CAN ONLY SCALE DATE OBJECTS WHICH IS WHY DATESARRAY EXISTS)
  xAxisScale = d3.scaleTime() //scale for dates
    .domain([d3.min(datesArray), d3.max(datesArray)])
    .range([paddingLeft, width - paddingRight])

  //declare baseline variable to be used for shading range
  baseline = d3.min(values, (d) => {
     return d[1]/100 < 0.1 ? 0 : (d[1]/100 - 0.1)
  })

  //scale used to create visual y-axis representation AND position elements
  yAxisScale = d3.scaleLinear() //scale for winrate values
    .domain([baseline, d3.max(values, (d) => {
              return d[1]/100 > 0.9 ? 1 : (d[1]/100 + 0.1) 
            })])
    .range([height - paddingBottom, paddingTop])
    //range([start, end])
}

let plotPoints = () => { 
  //TODO
  let tooltip = d3.select("body").append("div")
    .attr("id", "tooltip")
    .style("position", "absolute") //Allows positioning within svg
    .style("visibility", "hidden")
    .style("background-color", "black")
    .style("border-radius", "10px")
    .style("border", "2px solid orange")
    .style("padding", "5px")
    .style("font-size", "12px")
    .style("color", "white")
    .style("width", "auto")
    .style("height", "auto")
    .style("text-align", "center")

  // Transform the values to a format that can be used by the scales
  // Transform the values to a format that can be used by the scales
  const transformedValues = values.map(d => ({
      x: new Date(d[0]),
      y: d[1] / 100
  }));
    
  //append path element and create variable to represent it (the variable will be for the tooltip)
  svg.append("path")
      .datum(transformedValues)
      .attr("fill", "orange")
      .attr("opacity", 0.5)
      .attr("stroke", "none")
      .attr("d", d3.area()
          .x(d => xAxisScale(d.x)) // Access the 'x' property
          .y0(d => yAxisScale(baseline)) // Bottom of the area (x-axis)
          .y1(d => yAxisScale(baseline))); // Access the 'y' property

  svg.selectAll("path")
      .datum(transformedValues)
      .transition().duration(850)
      .attr("fill", "orange")
      .attr("opacity", 0.5)
      .attr("stroke", "none")
      .attr("d", d3.area()
          .x(d => xAxisScale(d.x)) // Access the 'x' property
          .y0(d => yAxisScale(baseline)) // Bottom of the area (x-axis)
          .y1(d => yAxisScale(d.y))); // Access the 'y' property

  //LOAD LINES FIRST BEFORE CIRCLES SO CIRCLES ARE DISPLAYED AT THE FRONT FOR TOOLTIP HOVER PRIORITY
  svg.selectAll("line") 
      .data(values.slice(1)) //Start from the second data point
      .enter()
      .append("line")
      .attr("x1", (d, i) => xAxisScale(datesArray[i]))
      .attr("y1", (d, i) => yAxisScale(baseline)) //Use past data point
      .attr("x2", (d, i) => xAxisScale(datesArray[i + 1]))
      .attr("y2", (d) => yAxisScale(baseline)) //Use the current data point
      .style("stroke", "orange")
      .style("stroke-width", 3);

  svg.selectAll("line")
      .data(values.slice(1)) //Start from the second data point
      .transition().duration(850)
      .attr("x1", (d, i) => xAxisScale(datesArray[i]))
      .attr("y1", (d, i) => yAxisScale(values[i][1] / 100)) //Use past data point
      .attr("x2", (d, i) => xAxisScale(datesArray[i + 1]))
      .attr("y2", (d) => yAxisScale(d[1] / 100)) //Use the current data point
      .style("stroke", "orange")
      .style("stroke-width", 3);

  svg.selectAll('circle')
      .data(values)
      .enter()
      .append('circle')//creates circle elements
      .attr('fill', 'orange')
      .attr('class', 'dataPoint')
      .attr('data-date', (d) => {
          return d[0]
      })
      .attr('data-value', (d) => {
          return d[1]
      })
      .attr('cx', (d, i) => xAxisScale(datesArray[i])) //x position
      .attr('cy', (d) => yAxisScale(baseline)) //y position
      .attr('r', (d) => 5) //radius size of each point
      .attr('padding', "20px");

  svg.selectAll('circle')
      .data(values)
      .transition().duration(850)
      .attr('padding', "20px")
      .attr('fill', 'orange')
      .attr('class', 'dataPoint')
      .attr('data-date', (d) => {
          return d[0]
      })
      .attr('data-value', (d) => {
          return d[1]
      })
      .attr('cx', (d, i) => xAxisScale(datesArray[i])) //x position
      .attr('cy', (d) => yAxisScale(d[1] / 100)) //y position
      .attr('r', (d) => 5) //radius size of each point

  //TODO: Use tooltip to display the date and winrate of the point that the user hovers over.
  svg.selectAll("circle")
    .on("mouseover", function(event, d) {
      // Get the coordinates of the mouse pointer and bounding box proportions
      // const [mouseX, mouseY] = d3.pointer(event, this);
      const circleRect = this.getBoundingClientRect();
      const tooltipWidth = tooltip.node().getBoundingClientRect().width;
      const tooltipHeight = tooltip.node().getBoundingClientRect().height;
      const tooltipLeft = circleRect.left + (circleRect.width / 2) - (tooltipWidth / 2);
      const tooltipTop = circleRect.top - tooltipHeight - 10; 

      // Create or update the tooltip
      d3.select("#tooltip")
          .style("left", tooltipLeft + "px")
          .style("top", tooltipTop + "px")
          .html(`${d[0].slice(0, 10)}<br>${d[1] + "%"}`)
          .style("visibility", "visible")
          //.html() allows html tags inside of the tooltip
      })
    .on("mouseout", function() {
      d3.select("#tooltip")
        .style("visibility", "hidden")
    });
}

let generateAxes = () => {
  let xAxis = d3.axisBottom(xAxisScale)
  let yAxis = d3.axisLeft(yAxisScale)
  yAxis.tickFormat(d3.format(".0%")); //display percentages

  //Remember svg = d3.select('svg');
  svg.append('g')
    .call(xAxis) //draws x axis within g element
    .attr('id', 'x-axis')
    //centers the x axis. translate(x, y)
    //height-padding must be in brackets
    .attr('transform', 'translate(0, ' + (height - paddingBottom) + ')')
    .selectAll("text") // Select all x-axis labels
    .attr("transform", "rotate(-30)") // Rotate labels
    .style("text-anchor", "end") // Align labels to the end of the tick
    .attr("dx", "-.8em") // Adjust horizontal position
    .attr("dy", ".15em"); // Adjust vertical position
  
  svg.append('g')
    .call(yAxis)
    .attr('id', 'y-axis')
    .attr('transform', 'translate(' + paddingLeft + ', 0)')
    .call(g => g.select(".domain").remove())
    .call(g => g.selectAll(".tick line").clone() //For grid lines
      .attr("x2", width - paddingLeft - paddingRight)
      .attr("stroke", "orange") 
      .attr("stroke-opacity", 0.5))
    //.selectAll("text")
    //.attr("font-size", "0.95em")
    //.attr("display", "none");
}

//call the functions to generate the graph
drawCanvas(); 
generateScales();
plotPoints();
generateAxes();
