//let values = props.data //2d array containing [dates, values]
let values = [["2024-06-17T05:32:34.440Z", 49.22], ["2023-06-17T05:32:34.440Z", 44.22], ["2022-06-17T05:32:34.440Z", 34.22], ["2021-06-17T05:32:34.440Z", 50.22], ["2023-02-17T05:32:34.440Z", 50.22]];

//sorts values by date values of each sub array. The awkward syntax is necessary since the default sort() function sorts by alphabetical order. 
values.sort((a, b) => {
    let dateA = new Date(a[0]); // Parse each date string into a Date object
    let dateB = new Date(b[0]);
    return dateA - dateB; // Compare the dates
});

let xAxisScale
let yAxisScale
let datesArray

//TODO: Will need to find a way to make these scale as the container changes size in the future
let width = 400 
let height = 400
let padding = 40

//This variable will select the svg element in the html file and generate the graph within it
let svg = d3.select('svg') 

const drawCanvas = () => {
    svg.attr('width', width)
    svg.attr('height', height)
}

//Format of each data point within 2d array: [date, winrate]
//WINRATE â€“ [[date: "2024-06-17T05:32:34.440Z", data: 58.22]]

const generateScales = () => {
  //map function iterates through values which is an array of arrays and returns the first element of each array (we have to do this in order to apply the max/min function to datesArray and to utilize xAxisScale which is a time scale)
  datesArray = values.map((d) => {
    return new Date(d[0])
  })

  //each graph should spawn in the top left corner of its respective container element
  //scale used to create visual x-axis representation (IT CAN ONLY SCALE DATE OBJECTS WHICH IS WHY DATESARRAY EXISTS)
  xAxisScale = d3.scaleTime() //scale for dates
    .domain([d3.min(datesArray), d3.max(datesArray)])
    .range([padding, width - padding])

  //scale used to create visual y-axis representation AND position elements
  yAxisScale = d3.scaleLinear() //scale for winrate values
    .domain([0, 1])
    .range([height - padding, padding])
    //range([start, end])
}

let plotPoints = () => {
  /* //not required for now (responsible for hovering effect over circle elements)
  let tooltip = d3.select('body')
  .append('div')
  .attr('id', 'tooltip')
  .style('visibility', 'hidden')
  .style('width', 'auto')
  .style('height', 'auto')
  */

/*
  //TODO
  // Declare the area generator.
  const area = d3.area()
      .x(d => xAxisScale(d[0]))
      .y0(yAxisScale(0))
      .y1(d => yAxisScale(d[1]/100));

  // Append a path for the area (under the axes).
  svg.append("path")
      .attr("fill", "steelblue")
      .attr("d", area(values));
*/

  /*
  // TODO: Create path for the area below the line
  svg.append("path")
    .datum(values)
    .attr("fill", "lightblue") // Fill color of the shaded area
    .attr("opacity", 0.5)
    .attr("stroke", "none") // No stroke for the path
    .attr("d", d3.area()
      .x(d => xAxisScale(d[0]))
      //.y0(yAxisScale(0))
      .y0(d => yAxisScale(0)) // Bottom of the area (x-axis)
      .y1(d => yAxisScale(d[1]/100))); // Top of the area (line)
  */

  svg.selectAll('circle')
    .data(values)
    .enter()
    .append('circle')//creates circle elements
    .attr('class', 'dataPoint')
    .attr('data-date', (d) => {
      return d[0]
    })
    .attr('data-value', (d) => {
      return d[1]
    })
    .attr('cx', (d, i) => xAxisScale(datesArray[i])) //x position
    .attr('cy', (d) => yAxisScale(d[1]/100)) //y position
    .attr('r', (d) => 5); //radius size of each point

  svg.selectAll("line")
   .data(values.slice(1)) //Start from the second data point
   .enter()
   .append("line")
   .attr("x1", (d, i) => xAxisScale(datesArray[i]))
   .attr("y1", (d, i) => yAxisScale(values[i][1]/100)) //Use past data point
   .attr("x2", (d, i) => xAxisScale(datesArray[i+1]))
   .attr("y2", (d) => yAxisScale(d[1]/100)) //Use the current data point
   .style("stroke", "orange")
   .style("stroke-width", 3);

  //not required for now
  /*
  .on('mouseover', (d) => {
    tooltip.transition()
      .style('visibility', 'visible')

    tooltip.text(d[0])
      document.querySelector('#tooltip').setAttribute('data-date', d[0])
    })

  .on('mouseout', (d) => {
    tooltip.transition()
      .style('visibility', 'hidden')
  }) 
  */
}

let generateAxes = () => {
  let xAxis = d3.axisBottom(xAxisScale)
  let yAxis = d3.axisLeft(yAxisScale)
  yAxis.tickFormat(d3.format(".0%")); //display percentages

  //Remember svg = d3.select('svg');
  svg.append('g')
    .call(xAxis) //draws x axis within g element
    .attr('id', 'x-axis')
    //centers the x axis. translate(x, y)
    //height-padding must be in brackets
    .attr('transform', 'translate(0, ' + (height - padding) + ')')
    .selectAll("text") // Select all x-axis labels
    .attr("transform", "rotate(-30)") // Rotate labels
    .style("text-anchor", "end") // Align labels to the end of the tick
    .attr("dx", "-.8em") // Adjust horizontal position
    .attr("dy", ".15em"); // Adjust vertical position

  svg.append('g')
    .call(yAxis)
    .attr('id', 'y-axis')
    .attr('transform', 'translate(' + padding + ', 0)')
    .call(g => g.selectAll(".tick line").clone() //For grid lines
    .attr("x2", width - padding - padding)
    .attr("stroke", "orange") 
    .attr("stroke-opacity", 0.5));
}

//call the functions to generate the graph
drawCanvas(); 
generateScales();
plotPoints();
generateAxes();




/*

<script src="https://d3js.org/d3.v5.min.js"></script> //This code is placed into an html file to import D3 allowing for the use of built in D3 functions

<script defer src='/GraphsExample.js'></script> //This code is placed into an html file to give GraphsExample.js the ability to generate html elements there

<link href="GraphsExample.css" rel="stylesheet"> //Placed into the same html file to customize the graph's elements. The axes and points used to create the graphs are html elements and can be given ids that css can identify


.call(g => g.select(".domain").remove()) //removes an axis line from graph


https://observablehq.com/@d3/line-chart/2?intent=fork
https://observablehq.com/@d3/area-chart/2?intent=fork
*/
